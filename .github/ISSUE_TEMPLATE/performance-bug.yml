name: "‚ö° Bug Report - Performance"
description: Reporta problemas de rendimiento en la API backend
labels: ["performance", "backend", "optimization", "type: bug", "status: backlog", "priority: planning"]
body:
  - type: markdown
    attributes:
      value: |
        ## üöÄ Reporte de Performance
        Ay√∫danos a identificar y resolver problemas de rendimiento en la API.
        Proporciona m√©tricas espec√≠ficas y detalles t√©cnicos.

  - type: dropdown
    id: performance-area
    attributes:
      label: √Årea de performance afectada
      description: ¬øD√≥nde se detect√≥ el problema de rendimiento?
      options:
        - API Response Time
        - Database Queries
        - Memory Usage
        - CPU Usage
        - Startup Time
        - Concurrent Requests
        - File I/O Operations
        - Other
    validations:
      required: true

  - type: textarea
    id: performance-description
    attributes:
      label: Descripci√≥n del problema
      description: |
        Describe el problema de rendimiento observado
      placeholder: |
        El endpoint GET /api/users tarda m√°s de 5 segundos en responder
        cuando hay m√°s de 1000 usuarios en la base de datos.
    validations:
      required: true

  - type: textarea
    id: metrics
    attributes:
      label: M√©tricas observadas
      description: |
        Proporciona m√©tricas espec√≠ficas: tiempos de respuesta, uso de memoria, etc.
      placeholder: |
        - **Response time:** 5.2s (esperado: <500ms)
        - **Memory usage:** 512MB (normal: 128MB)
        - **CPU usage:** 85% durante la request
        - **Database query time:** 4.8s
      value: |
        - **Response time:** 
        - **Memory usage:** 
        - **CPU usage:** 
        - **Database query time:** 
    validations:
      required: true

  - type: textarea
    id: endpoint-details
    attributes:
      label: Detalles del endpoint afectado
      description: |
        Informaci√≥n espec√≠fica sobre el endpoint con problemas
      placeholder: |
        **Method:** GET
        **Endpoint:** /api/users
        **Query params:** ?limit=100&offset=0
        **Load:** 50 concurrent users
    validations:
      required: false

  - type: textarea
    id: database-queries
    attributes:
      label: Consultas de base de datos involucradas
      description: |
        Si el problema est√° relacionado con queries SQL lentas
      placeholder: |
        ```sql
        SELECT users.*, profiles.* 
        FROM users 
        LEFT JOIN profiles ON users.id = profiles.user_id 
        WHERE users.active = 1
        ORDER BY users.created_at DESC
        LIMIT 100 OFFSET 0;
        ```
        
        **Execution time:** 4.8s
        **Rows examined:** 10,000
    validations:
      required: false

  - type: textarea
    id: environment-load
    attributes:
      label: Informaci√≥n del entorno y carga
      description: |
        Detalles sobre el entorno donde se detect√≥ el problema
      value: |
        - **Environment:** (development/staging/production)
        - **Node.js version:** 
        - **MySQL version:** 
        - **Server specs:** (CPU, RAM)
        - **Concurrent users:** 
        - **Data volume:** (number of records)
      placeholder: Completa la informaci√≥n del entorno
    validations:
      required: true

  - type: textarea
    id: reproduction-steps
    attributes:
      label: Pasos para reproducir el problema
      description: |
        ¬øC√≥mo podemos reproducir el problema de performance?
      placeholder: |
        1. Poblar la base de datos con 10,000 usuarios
        2. Hacer 50 requests concurrentes a GET /api/users
        3. Observar el tiempo de respuesta excesivo
    validations:
      required: true

  - type: textarea
    id: suggested-solutions
    attributes:
      label: Posibles soluciones sugeridas
      description: |
        Si tienes ideas sobre c√≥mo optimizar el rendimiento
      placeholder: |
        - Agregar √≠ndices en la tabla users (active, created_at)
        - Implementar paginaci√≥n m√°s eficiente
        - Usar cache Redis para consultas frecuentes
        - Optimizar la query eliminando JOINs innecesarios
    validations:
      required: false